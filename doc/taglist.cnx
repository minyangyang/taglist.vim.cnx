*taglist.txt*	用于浏览源代码的插件

作者：Yegappan Lakshmanan  (yegappan AT yahoo DOT com)
译者：闲耘™(hotoo.cn[AT]gmail.com)
      张雷 (zhang.lei.fly[AT]gmail.com)
      davidx (mykingheaven[AT]gmail.com)

针对 Vim version 6.0 及其以上版本
最后更新： 2007/5/24

1. 概述 					|taglist-intro|
2. 网上的 Taglist 资讯				|taglist-internet|
3. 安装前提					|taglist-requirements|
4. 安装		 				|taglist-install|
5. 使用 					|taglist-using|
6. 选项 					|taglist-options|
7. 命令 					|taglist-commands|
8. 全局函数					|taglist-functions|
9. 扩展 					|taglist-extend|
10. 常见问题 					|taglist-faq|
11. 许可证 					|taglist-license|
12. 待办事项					|taglist-todo|

==============================================================================
						*taglist-intro*
1. 概述~

"Tag List" 是一个用于浏览源码的的 Vim 插件。它允许你有效的浏览各种不同编程语言
的源码文件，"Tag List" 提供以下特性：

    * 显示 tags （标签，后面均保留原文） （函数，类，结构，变量，等等。）
      在纵向、或者横向的分割窗口中显示定义。
    * 在使用 GUI 的 Vim (gvim) 中，在下拉菜单和弹出菜单中显示 tags。
    * 在文件或缓冲区之间切换时，自动更新 taglist 窗口。
      当打开新文件时，这个文件的 tags 定义会被添加到已存在的文件列表中，
      并以文件名作为分组显示。
    * 当 taglist 窗口中的标签名被选中时，光标会自动定位在源文件对应的
      标签定义处。
    * 自动高亮当前标签名。
    * tags 按照类型分组并显示在可折叠的树中。
    * Can display the prototype and scope of a tag.
    * 可以显示 tag 的原型和作用域。
    * 在 taglist 窗口中用 tag 的原型来替代 tag 名称显示（可选）。
    * tag 列表可以按照名称或者时间顺序排序。
    * 支持以下语言文件： Assembly, ASP, Awk, Beta, C,
      C++, C#, Cobol, Eiffel, Erlang, Fortran, HTML, Java, Javascript, Lisp,
      Lua, Make, Pascal, Perl, PHP, Python, Rexx, Ruby, Scheme, Shell, Slang,
      SML, Sql, TCL, Verilog, Vim and Yacc.
    * 可以很方便的扩展以支持新语言，修改现有语言支持也很容易。
    * 提供了在 Vim 状态栏或者标题栏显示当前 tag 名称的功能。
    * taglist 中的 tags 和文件列表可以被保存并用于恢复整个 Vim 会话(Session).
    * 提供了获取当前 tag 名称和原型的命令。
    * 支持在控制台/终端和 GUI 的 Vim 版本。
    * 可以配合 winmanager 插件一起工作。使用 winmanager，可以让 Vim 插件，比如
      文件资源管理器，缓冲区浏览器和 taglist 插件就像在 IDE 一样。
    * 支持 Unix 和 MS-Windows 操作系统。

==============================================================================
						*taglist-internet*
2. 互联网上的 Taglist

Taglist 的主页在:
>
	http://vim-taglist.sourceforge.net/
<
你可以加入到 Taglist 的邮件列表中来提出你的问题, 建议, 或者bug报告.
访问下面的页面来加入到邮件列表中:
>
	http://groups.yahoo.com/group/taglist
<
==============================================================================
						*taglist-requirements*
3. 须求~

这个 taglist 插件需要以下组件:

    * Vim 6.0 或 更高级版本
    * Exuberant ctags 5.0 或 更高级版本

这个 taglist 插件可以在所有系统平台工作,只要系统平台的有 exuberant ctags
utility 和 Vim 支持 (这里包括 MS-Windows 和 基于 Unix
的操作系统平台).

这个 taglist 插件依赖 exuberant ctags 工具动态
生成的 tag 列表.   exuberant ctags 必须安装到
你的系统里，如果你想使用这个插件.  exuberant ctags 工具 随
大多数的 Linux 发行版一起发布.  你也可下载 exuberant ctags 工具
从:
>
	http://ctags.sourceforge.net
<
这个 taglist 插件不用建立 tags 文件 也没必要
建立一个 tags 文件来使用这个插件. 这个 taglist 插件不能正常工作如果没有
 GNU ctags 或  Unix ctags 工作.

这个插件依赖于 Vim 的 "filetype" 检测机能 去检测 
当前文件的类型. 你必须打开 Vim 文件检测机能，通过 
添加以下文本行到你的 .vimrc 文件:
>
	filetype on
<
这个 taglist 插件 不能正常工作台，如果你打开了 Vim 严格模式 (使用了
 -Z 命令行参数).

这个 taglist 插件 使用了 Vim system() 函数 协同 exuberant
ctags 工具荼. 如果 Vim 编译时没有 system() 函数那么你就
没法用 taglist 插件.一些 Linux 发行版 (如Suse) 编译的
Vim 是没有 system() 函数，这是基于安全原因.

==============================================================================
						*taglist-install*
4. 安装~

1. 下载 taglist.zip 文件和解压这个 files 到 $HOME/.vim 或者
   $HOME/vimfiles 或者 $VIM/vimfiles 目录. 完成这个步骤后,你会
   以下两个文件 (目录结构要维持原样):

	plugin/taglist.vim - taglist 插件的主文件 
	doc/taglist.txt    - 文档 (帮助) 文件

   通过参考 |add-plugin|和 |'runtimepath'| Vim 帮助页面得到更多
   关于安装 Vim 插件的细节.
2. 切换到 $HOME/.vim/doc 或者 $HOME/vimfiles/doc 或者 $VIM/vimfiles/doc
   目录, 打开 Vim 和运行 ":helptags ." 命令生成
   taglist 帮助文件的 tag. 没有这个步骤,你是不能跳转到 taglist 帮助文件
   标题.
3. 如果 exuberant ctags 工具由 PATH 环境参数
   指定的其中一个目录, 就应该 .vimrc 文件设定 'Tlist_Ctags_Cmd' 参数 来
   指定 exuberant ctags 工具
   所在的位置 (not to the directory).
4. 如果你正在运行一个终端/控制台版本的 VIM 并且终端
   不支持改变窗口宽度，那么就应该设置
   'Tlist_Inc_Winwidth' 参数为 0  并写入 .vimrc 文件中.
5. 重启 Vim.
6. You can now use the ":TlistToggle" command to open/close the taglist
   window. You can use the ":help taglist" command to get more information
   about using the taglist 插件.

To uninstall the taglist 插件, remove the plugin/taglist.vim and
doc/taglist.txt files from the $HOME/.vim or $HOME/vimfiles directory.

==============================================================================
						*taglist-using*
5. Usage~

The taglist 插件 can be used in several different ways.

1. You can keep the taglist window open during the entire editing session. On
   opening the taglist window, the tags defined in all the files in the Vim
   buffer list will be displayed in the taglist window. As you edit files, the
   tags defined in them will be added to the taglist window. You can select a
   tag from the taglist window and jump to it. The current tag will be
   highlighted in the taglist window. You can close the taglist window when
   you no longer need the window.
2. You can configure the taglist 插件 to process the tags defined in all the
   edited files always. In this configuration, even if the taglist window is
   closed and the taglist menu is not displayed, the taglist 插件 will
   processes the tags defined in newly edited files. You can then open the
   taglist window only when you need to select a tag and then automatically
   close the taglist window after selecting the tag.
3. You can configure the taglist 插件 to display only the tags defined in
   the current file in the taglist window. By default, the taglist 插件
   displays the tags defined in all the files in the Vim buffer list. As you
   switch between files, the taglist window will be refreshed to display only
   the tags defined in the current file.
4. In GUI Vim, you can use the Tags pull-down and popup menu created by the
   taglist 插件 to display the tags defined in the current file and select a
   tag to jump to it. You can use the menu without opening the taglist window.
   By default, the Tags menu is disabled.
5. You can configure the taglist 插件 to display the name of the current tag
   in the Vim window status line or in the Vim window title bar. For this to
   work without the taglist window or menu, you need to configure the taglist
   插件 to process the tags defined in a file always.
6. You can save the tags defined in multiple files to a taglist session file
   and load it when needed. You can also configure the taglist 插件 to not
   update the taglist window when editing new files. You can then manually add
   files to the taglist window.

Opening the taglist window~
You can open the taglist window using the ":TlistOpen" or the ":TlistToggle"
commands. The ":TlistOpen" command opens the taglist window and jumps to it.
The ":TlistToggle" command opens or closes (toggle) the taglist window and the
cursor remains in the current window. If the 'Tlist_GainFocus_On_ToggleOpen'
variable is set to 1, then the ":TlistToggle" command opens the taglist window
and moves the cursor to the taglist window.

You can map a key to invoke these commands. For example, the following command
creates a normal mode mapping for the <F8> key to toggle the taglist window.
>
	nnoremap <silent> <F8> :TlistToggle<CR>
<
Add the above mapping to your ~/.vimrc or $HOME/_vimrc file.

To automatically open the taglist window on Vim startup, set the
'Tlist_Auto_Open' variable to 1.

You can also open the taglist window on startup using the following command
line:
>
	$ vim +TlistOpen
<
Closing the taglist window~
You can close the taglist window from the taglist window by pressing 'q' or
using the Vim ":q" command. You can also use any of the Vim window commands to
close the taglist window. Invoking the ":TlistToggle" command when the taglist
window is opened, closes the taglist window. You can also use the
":TlistClose" command to close the taglist window.

To automatically close the taglist window when a tag or file is selected, you
can set the 'Tlist_Close_On_Select' variable to 1.  To exit Vim when only the
taglist window is present, set the 'Tlist_Exit_OnlyWindow' variable to 1.

Jumping to a tag or a file~
You can select a tag in the taglist window either by pressing the <Enter> key
or by double clicking the tag name using the mouse. To jump to a tag on a
single mouse click set the 'Tlist_Use_SingleClick' variable to 1.

If the selected file is already opened in a window, then the cursor is moved
to that window. If the file is not currently opened in a window then the file
is opened in the window used by the taglist 插件 to show the previously
selected file. If there are no usable windows, then the file is opened in a
new window.  The file is not opened in special windows like the quickfix
window, preview window and windows containing buffer with the 'buftype' option
set.

To jump to the tag in a new window, press the 'o' key. To open the file in the
previous window (Ctrl-W_p) use the 'P' key. You can press the 'p' key to jump
to the tag but still keep the cursor in the taglist window (preview).

To open the selected file in a tab, use the 't' key.  If the file is already
present in a tab then the cursor is moved to that tab otherwise the file is
opened in a new tab. To jump to a tag in a new tab press Ctrl-t.  The taglist
window is automatically opened in the newly created tab.

Instead of jumping to a tag, you can open a file by pressing the <Enter> key
or by double clicking the file name using the mouse.

In the taglist window, you can use the [[ or <Backspace> key to jump to the
beginning of the previous file. You can use the ]] or <Tab> key to jump to the
beginning of the next file. When you reach the first or last file, the search
wraps around and the jumps to the next/previous file.

Highlighting the current tag~
The taglist 插件 automatically highlights the name of the current tag in the
taglist window. The Vim |CursorHold| autocmd event is used for this. If the
current tag name is not visible in the taglist window, then the taglist window
contents are scrolled to make that tag name visible. You can also use the
":TlistHighlightTag" command to force the highlighting of the current tag.

The tag name is highlighted if no activity is performed for |'updatetime'|
milliseconds. The default value for this Vim option is 4 seconds. To avoid
unexpected problems, you should not set the |'updatetime'| option to a very
low value.

To disable the automatic highlighting of the current tag name in the taglist
window, set the 'Tlist_Auto_Highlight_Tag' variable to zero.

When entering a Vim buffer/window, the taglist 插件 automatically highlights
the current tag in that buffer/window.  If you like to disable the automatic
highlighting of the current tag when entering a buffer, set the
'Tlist_Highlight_Tag_On_BufEnter' variable to zero.

Adding files to the taglist~
When the taglist window is opened, all the files in the Vim buffer list are
processed and the supported files are added to the taglist.  When you edit a
file in Vim, the taglist 插件 automatically processes this file and adds it
to the taglist. If you close the taglist window, the tag information in the
taglist is retained.

To process files even when the taglist window is not open, set the
'Tlist_Process_File_Always' variable to 1.

You can manually add multiple files to the taglist without opening them using
the ":TlistAddFiles" and the ":TlistAddFilesRecursive" commands.

For example, to add all the C files in the /my/project/dir directory to the
taglist, you can use the following command:
>
	:TlistAddFiles /my/project/dir/*.c
<
Note that when adding several files with a large number of tags or a large
number of files, it will take several seconds to several minutes for the
taglist 插件 to process all the files. You should not interrupt the taglist
插件 by pressing <CTRL-C>.

You can recursively add multiple files from a directory tree using the
":TlistAddFilesRecursive" command:
>
	:TlistAddFilesRecursive /my/project/dir *.c
<
This command takes two arguments. The first argument specifies the directory
from which to recursively add the files. The second optional argument
specifies the wildcard matching pattern for selecting the files to add. The
default pattern is * and all the files are added.

Displaying tags for only one file~
The taglist window displays the tags for all the files in the Vim buffer list
and all the manually added files. To display the tags for only the current
active buffer, set the 'Tlist_Show_One_File' variable to 1.

Removing files from the taglist~
You can remove a file from the taglist window, by pressing the 'd' key when the
cursor is on one of the tags listed for the file in the taglist window. The
removed file will no longer be displayed in the taglist window in the current
Vim session. To again display the tags for the file, open the file in a Vim
window and then use the ":TlistUpdate" command or use ":TlistAddFiles" command
to add the file to the taglist.

When a buffer is removed from the Vim buffer list using the ":bdelete" or the
":bwipeout" command, the taglist is updated to remove the stored information
for this buffer.

Updating the tags displayed for a file~
The taglist 插件 keeps track of the modification time of a file. When the
modification time changes (the file is modified), the taglist 插件
automatically updates the tags listed for that file. The modification time of
a file is checked when you enter a window containing that file or when you
load that file.

You can also update or refresh the tags displayed for a file by pressing the
"u" key in the taglist window. If an existing file is modified, after the file
is saved, the taglist 插件 automatically updates the tags displayed for the
file.

You can also use the ":TlistUpdate" command to update the tags for the current
buffer after you made some changes to it. You should save the modified buffer
before you update the taglist window. Otherwise the listed tags will not
include the new tags created in the buffer.

If you have deleted the tags displayed for a file in the taglist window using
the 'd' key, you can again display the tags for that file using the
":TlistUpdate" command.

Controlling the taglist updates~
To disable the automatic processing of new files or modified files, you can
set the 'Tlist_Auto_Update' variable to zero. When this variable is set to
zero, the taglist is updated only when you use the ":TlistUpdate" command or
the ":TlistAddFiles" or the ":TlistAddFilesRecursive" commands. You can use
this option to control which files are added to the taglist.

You can use the ":TlistLock" command to lock the taglist contents. After this
command is executed, new files are not automatically added to the taglist.
When the taglist is locked, you can use the ":TlistUpdate" command to add the
current file or the ":TlistAddFiles" or ":TlistAddFilesRecursive" commands to
add new files to the taglist.  To unlock the taglist, use the ":TlistUnlock"
command.

Displaying the tag prototype~
To display the prototype of the tag under the cursor in the taglist window,
press the space bar. If you place the cursor on a tag name in the taglist
window, then the tag prototype is displayed at the Vim status line after
|'updatetime'| milliseconds. The default value for the |'updatetime'| Vim
option is 4 seconds.

You can get the name and prototype of a tag without opening the taglist window
and the taglist menu using the ":TlistShowTag" and the ":TlistShowPrototype"
commands. These commands will work only if the current file is already present
in the taglist. To use these commands without opening the taglist window, set
the 'Tlist_Process_File_Always' variable to 1.

You can use the ":TlistShowTag" command to display the name of the tag at or
before the specified line number in the specified file.  If the file name and
line number are not supplied, then this command will display the name of the
current tag. For example,
>
	:TlistShowTag
	:TlistShowTag myfile.java 100
<
You can use the ":TlistShowPrototype" command to display the prototype of the
tag at or before the specified line number in the specified file.  If the file
name and the line number are not supplied, then this command will display the
prototype of the current tag.  For example,
>
	:TlistShowPrototype
	:TlistShowPrototype myfile.c 50
<
In the taglist window, when the mouse is moved over a tag name, the tag
prototype is displayed in a balloon. This works only in GUI versions where
balloon evaluation is supported.

Taglist window contents~
The taglist window contains the tags defined in various files in the taglist
grouped by the filename and by the tag type (variable, function, class, etc.).
For tags with scope information (like class members, structures inside
structures, etc.), the scope information is displayed in square brackets "[]"
after the tag name.

The contents of the taglist buffer/window are managed by the taglist 插件.
The |'filetype'| for the taglist buffer is set to 'taglist'.  The Vim
|'modifiable'| option is turned off for the taglist buffer. You should not
manually edit the taglist buffer, by setting the |'modifiable'| flag. If you
manually edit the taglist buffer contents, then the taglist 插件 will be out
of sync with the taglist buffer contents and the 插件 will no longer work
correctly. To redisplay the taglist buffer contents again, close the taglist
window and reopen it.

Opening and closing the tag and file tree~
In the taglist window, the tag names are displayed as a foldable tree using
the Vim folding support. You can collapse the tree using the '-' key or using
the Vim |zc| fold command. You can open the tree using the '+' key or using
the Vim |zo| fold command. You can open all the folds using the '*' key or
using the Vim |zR| fold command. You can also use the mouse to open/close the
folds. You can close all the folds using the '=' key. You should not manually
create or delete the folds in the taglist window.

To automatically close the fold for the inactive files/buffers and open only
the fold for the current buffer in the taglist window, set the
'Tlist_File_Fold_Auto_Close' variable to 1.

Sorting the tags for a file~
The tags displayed in the taglist window can be sorted either by their name or
by their chronological order. The default sorting method is by the order in
which the tags appear in a file. You can change the default sort method by
setting the 'Tlist_Sort_Type' variable to either "name" or "order". You can
sort the tags by their name by pressing the "s" key in the taglist window. You
can again sort the tags by their chronological order using the "s" key. Each
file in the taglist window can be sorted using different order.

Zooming in and out of the taglist window~
You can press the 'x' key in the taglist window to maximize the taglist
window width/height. The window will be maximized to the maximum possible
width/height without closing the other existing windows. You can again press
'x' to restore the taglist window to the default width/height.

						*taglist-session*
Taglist Session~
A taglist session refers to the group of files and their tags stored in the
taglist in a Vim session.

You can save and restore a taglist session (and all the displayed tags) using
the ":TlistSessionSave" and ":TlistSessionLoad" commands.

To save the information about the tags and files in the taglist to a file, use
the ":TlistSessionSave" command and specify the filename:
>
	:TlistSessionSave <file name>
<
To load a saved taglist session, use the ":TlistSessionLoad" command: >

	:TlistSessionLoad <file name>
<
When you load a taglist session file, the tags stored in the file will be
added to the tags already stored in the taglist.

The taglist session feature can be used to save the tags for large files or a
group of frequently used files (like a project). By using the taglist session
file, you can minimize the amount to time it takes to load/refresh the taglist
for multiple files.

You can create more than one taglist session file for multiple groups of
files.

Displaying the tag name in the Vim status line or the window title bar~
You can use the Tlist_Get_Tagname_By_Line() function provided by the taglist
插件 to display the current tag name in the Vim status line or the window
title bar. Similarly, you can use the Tlist_Get_Tag_Prototype_By_Line()
function to display the current tag prototype in the Vim status line or the
window title bar.

For example, the following command can be used to display the current tag name
in the status line:
>
	:set statusline=%<%f%=%([%{Tlist_Get_Tagname_By_Line()}]%)
<
The following command can be used to display the current tag name in the
window title bar:
>
	:set title titlestring=%<%f\ %([%{Tlist_Get_Tagname_By_Line()}]%)
<
Note that the current tag name can be displayed only after the file is
processed by the taglist 插件. For this, you have to either set the
'Tlist_Process_File_Always' variable to 1 or open the taglist window or use
the taglist menu. For more information about configuring the Vim status line,
refer to the documentation for the Vim |'statusline'| option.

Changing the taglist window highlighting~
The following Vim highlight groups are defined and used to highlight the
various entities in the taglist window:

    TagListTagName  - Used for tag names
    TagListTagScope - Used for tag scope
    TagListTitle    - Used for tag titles
    TagListComment  - Used for comments
    TagListFileName - Used for filenames

By default, these highlight groups are linked to the standard Vim highlight
groups. If you want to change the colors used for these highlight groups,
prefix the highlight group name with 'My' and define it in your .vimrc or
.gvimrc file: MyTagListTagName, MyTagListTagScope, MyTagListTitle,
MyTagListComment and MyTagListFileName.  For example, to change the colors
used for tag names, you can use the following command:
>
    :highlight MyTagListTagName guifg=blue ctermfg=blue
<
Controlling the taglist window~
To use a horizontally split taglist window, instead of a vertically split
window, set the 'Tlist_Use_Horiz_Window' variable to 1.

To use a vertically split taglist window on the rightmost side of the Vim
window, set the 'Tlist_Use_Right_Window' variable to 1.

You can specify the width of the vertically split taglist window, by setting
the 'Tlist_WinWidth' variable.  You can specify the height of the horizontally
split taglist window, by setting the 'Tlist_WinHeight' variable.

When opening a vertically split taglist window, the Vim window width is
increased to accommodate the new taglist window. When the taglist window is
closed, the Vim window is reduced. To disable this, set the
'Tlist_Inc_Winwidth' variable to zero.

To reduce the number of empty lines in the taglist window, set the
'Tlist_Compact_Format' variable to 1.

To not display the Vim fold column in the taglist window, set the
'Tlist_Enable_Fold_Column' variable to zero.

To display the tag prototypes instead of the tag names in the taglist window,
set the 'Tlist_Display_Prototype' variable to 1.

To not display the scope of the tags next to the tag names, set the
'Tlist_Display_Tag_Scope' variable to zero.

						*taglist-keys*
Taglist window key list~
The following table lists the description of the keys that can be used
in the taglist window.

  Key           Description~

  <CR>          Jump to the location where the tag under cursor is
                defined.
  o             Jump to the location where the tag under cursor is
                defined in a new window.
  P             Jump to the tag in the previous (Ctrl-W_p) window.
  p             Display the tag definition in the file window and
                keep the cursor in the taglist window itself.
  t             Jump to the tag in a new tab. If the file is already
                opened in a tab, move to that tab.
  Ctrl-t	Jump to the tag in a new tab.
  <Space>       Display the prototype of the tag under the cursor.
  		For file names, display the full path to the file,
		file type and the number of tags. For tag types, display the
		tag type and the number of tags.
  u             Update the tags listed in the taglist window
  s             Change the sort order of the tags (by name or by order)
  d             Remove the tags for the file under the cursor
  x             Zoom-in or Zoom-out the taglist window
  +             Open a fold
  -             Close a fold
  *             Open all folds
  =             Close all folds
  [[		Jump to the beginning of the previous file
  <Backspace>	Jump to the beginning of the previous file
  ]]		Jump to the beginning of the next file
  <Tab>		Jump to the beginning of the next file
  q             Close the taglist window
  <F1>          Display help

The above keys will work in both the normal mode and the insert mode.

						*taglist-menu*
Taglist menu~
When using GUI Vim, the taglist 插件 can display the tags defined in the
current file in the drop-down menu and the popup menu. By default, this
feature is turned off. To turn on this feature, set the 'Tlist_Show_Menu'
variable to 1.

You can jump to a tag by selecting the tag name from the menu. You can use the
taglist menu independent of the taglist window i.e. you don't need to open the
taglist window to get the taglist menu.

When you switch between files/buffers, the taglist menu is automatically
updated to display the tags defined in the current file/buffer.

The tags are grouped by their type (variables, functions, classes, methods,
etc.) and displayed as a separate sub-menu for each type. If all the tags
defined in a file are of the same type (e.g. functions), then the sub-menu is
not used.

If the number of items in a tag type submenu exceeds the value specified by
the 'Tlist_Max_Submenu_Items' variable, then the submenu will be split into
multiple submenus. The default setting for 'Tlist_Max_Submenu_Items' is 25.
The first and last tag names in the submenu are used to form the submenu name.
The menu items are prefixed by alpha-numeric characters for easy selection by
keyboard.

If the popup menu support is enabled (the |'mousemodel'| option contains
"popup"), then the tags menu is added to the popup menu. You can access
the popup menu by right clicking on the GUI window.

You can regenerate the tags menu by selecting the 'Tags->Refresh menu' entry.
You can sort the tags listed in the menu either by name or by order by
selecting the 'Tags->Sort menu by->Name/Order' menu entry.

You can tear-off the Tags menu and keep it on the side of the Vim window
for quickly locating the tags.

Using the taglist 插件 with the winmanager 插件~
You can use the taglist 插件 with the winmanager 插件. This will allow you
to use the file explorer, buffer explorer and the taglist 插件 at the same
time in different windows. To use the taglist 插件 with the winmanager
插件, set 'TagList' in the 'winManagerWindowLayout' variable. For example,
to use the file explorer 插件 and the taglist 插件 at the same time, use
the following setting: >

	let winManagerWindowLayout = 'FileExplorer|TagList'
<
Getting help~
If you have installed the taglist help file (this file), then you can use the
Vim ":help taglist-<keyword>" command to get help on the various taglist
topics.

You can press the <F1> key in the taglist window to display the help
information about using the taglist window. If you again press the <F1> key,
the help information is removed from the taglist window.

						*taglist-debug*
Debugging the taglist 插件~
You can use the ":TlistDebug" command to enable logging of the debug messages
from the taglist 插件. To display the logged debug messages, you can use the
":TlistMessages" command. To disable the logging of the debug messages, use
the ":TlistUndebug" command.

You can specify a file name to the ":TlistDebug" command to log the debug
messages to a file. Otherwise, the debug messages are stored in a script-local
variable. In the later case, to minimize memory usage, only the last 3000
characters from the debug messages are stored.

==============================================================================
						*taglist-options*
6. Options~

A number of Vim variables control the behavior of the taglist 插件. These
variables are initialized to a default value. By changing these variables you
can change the behavior of the taglist 插件. You need to change these
settings only if you want to change the behavior of the taglist 插件. You
should use the |:let| command in your .vimrc file to change the setting of any
of these variables.

The configurable taglist variables are listed below. For a detailed
description of these variables refer to the text below this table.

|'Tlist_Auto_Highlight_Tag'|	Automatically highlight the current tag in the
				taglist.
|'Tlist_Auto_Open'|		Open the taglist window when Vim starts.
|'Tlist_Auto_Update'|		Automatically update the taglist to include
				newly edited files.
|'Tlist_Close_On_Select'|	Close the taglist window when a file or tag is
				selected.
|'Tlist_Compact_Format'|	Remove extra information and blank lines from
       				the taglist window.
|'Tlist_Ctags_Cmd'|		Specifies the path to the ctags utility.
|'Tlist_Display_Prototype'|	Show prototypes and not tags in the taglist
				window.
|'Tlist_Display_Tag_Scope'|	Show tag scope next to the tag name.
|'Tlist_Enable_Fold_Column'|	Show the fold indicator column in the taglist
				window.
|'Tlist_Exit_OnlyWindow'|	Close Vim if the taglist is the only window.
|'Tlist_File_Fold_Auto_Close'|	Close tag folds for inactive buffers.
|'Tlist_GainFocus_On_ToggleOpen'|
				Jump to taglist window on open.
|'Tlist_Highlight_Tag_On_BufEnter'|
				On entering a buffer, automatically highlight
				the current tag.
|'Tlist_Inc_Winwidth'|		Increase the Vim window width to accommodate
				the taglist window.
|'Tlist_Max_Submenu_Items'|	Maximum number of items in a tags sub-menu.
|'Tlist_Max_Tag_Length'|	Maximum tag length used in a tag menu entry.
|'Tlist_Process_File_Always'|	Process files even when the taglist window is
				closed.
|'Tlist_Show_Menu'|		Display the tags menu.
|'Tlist_Show_One_File'|		Show tags for the current buffer only.
|'Tlist_Sort_Type'|		Sort method used for arranging the tags.
|'Tlist_Use_Horiz_Window'|	Use a horizontally split window for the
				taglist window.
|'Tlist_Use_Right_Window'|	Place the taglist window on the right side.
|'Tlist_Use_SingleClick'|	Single click on a tag jumps to it.
|'Tlist_WinHeight'|		Horizontally split taglist window height.
|'Tlist_WinWidth'|		Vertically split taglist window width.

						*'Tlist_Auto_Highlight_Tag'*
Tlist_Auto_Highlight_Tag~
The taglist 插件 will automatically highlight the current tag in the taglist
window. If you want to disable this, then you can set the
'Tlist_Auto_Highlight_Tag' variable to zero. Note that even though the current
tag highlighting is disabled, the tags for a new file will still be added to
the taglist window.
>
	let Tlist_Auto_Highlight_Tag = 0
<
With the above variable set to 1, you can use the ":TlistHighlightTag" command
to highlight the current tag.

						*'Tlist_Auto_Open'*
Tlist_Auto_Open~
To automatically open the taglist window, when you start Vim, you can set the
'Tlist_Auto_Open' variable to 1. By default, this variable is set to zero and
the taglist window will not be opened automatically on Vim startup.
>
	let Tlist_Auto_Open = 1
<
The taglist window is opened only when a supported type of file is opened on
Vim startup. For example, if you open text files, then the taglist window will
not be opened.

						*'Tlist_Auto_Update'*
Tlist_Auto_Update~
When a new file is edited, the tags defined in the file are automatically
processed and added to the taglist. To stop adding new files to the taglist,
set the 'Tlist_Auto_Update' variable to zero. By default, this variable is set
to 1.
>
	let Tlist_Auto_Update = 0
<
With the above variable set to 1, you can use the ":TlistUpdate" command to
add the tags defined in the current file to the taglist.

						*'Tlist_Close_On_Select'*
Tlist_Close_On_Select~
If you want to close the taglist window when a file or tag is selected, then
set the 'Tlist_Close_On_Select' variable to 1. By default, this variable is
set zero and when you select a tag or file from the taglist window, the window
is not closed.
>
	let Tlist_Close_On_Select = 1
<
						*'Tlist_Compact_Format'*
Tlist_Compact_Format~
By default, empty lines are used to separate different tag types displayed for
a file and the tags displayed for different files in the taglist window. If
you want to display as many tags as possible in the taglist window, you can
set the 'Tlist_Compact_Format' variable to 1 to get a compact display.
>
	let Tlist_Compact_Format = 1
<
						*'Tlist_Ctags_Cmd'*
Tlist_Ctags_Cmd~
The 'Tlist_Ctags_Cmd' variable specifies the location (path) of the exuberant
ctags utility. If exuberant ctags is present in any one of the directories in
the PATH environment variable, then there is no need to set this variable.

The exuberant ctags tool can be installed under different names.  When the
taglist 插件 starts up, if the 'Tlist_Ctags_Cmd' variable is not set, it
checks for the names exuberant-ctags, exctags, ctags, ctags.exe and tags in
the PATH environment variable.  If any one of the named executable is found,
then the Tlist_Ctags_Cmd variable is set to that name.

If exuberant ctags is not present in one of the directories specified in the
PATH environment variable, then set this variable to point to the location of
the ctags utility in your system. Note that this variable should point to the
fully qualified exuberant ctags location and NOT to the directory in which
exuberant ctags is installed. If the exuberant ctags tool is not found in
either PATH or in the specified location, then the taglist 插件 will not be
loaded. Examples:
>
	let Tlist_Ctags_Cmd = 'd:\tools\ctags.exe'
	let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
<
						*'Tlist_Display_Prototype'*
Tlist_Display_Prototype~
By default, only the tag name will be displayed in the taglist window. If you
like to see tag prototypes instead of names, set the 'Tlist_Display_Prototype'
variable to 1. By default, this variable is set to zero and only tag names
will be displayed.
>
	let Tlist_Display_Prototype = 1
<
						*'Tlist_Display_Tag_Scope'*
Tlist_Display_Tag_Scope~
By default, the scope of a tag (like a C++ class) will be displayed in
square brackets next to the tag name. If you don't want the tag scopes
to be displayed, then set the 'Tlist_Display_Tag_Scope' to zero. By default,
this variable is set to 1 and the tag scopes will be displayed.
>
	let Tlist_Display_Tag_Scope = 0
<
						*'Tlist_Enable_Fold_Column'*
Tlist_Enable_Fold_Column~
By default, the Vim fold column is enabled and displayed in the taglist
window. If you wish to disable this (for example, when you are working with a
narrow Vim window or terminal), you can set the 'Tlist_Enable_Fold_Column'
variable to zero.
>
	let Tlist_Enable_Fold_Column = 1
<
						*'Tlist_Exit_OnlyWindow'*
Tlist_Exit_OnlyWindow~
If you want to exit Vim if only the taglist window is currently opened, then
set the 'Tlist_Exit_OnlyWindow' variable to 1. By default, this variable is
set to zero and the Vim instance will not be closed if only the taglist window
is present.
>
	let Tlist_Exit_OnlyWindow = 1
<
						*'Tlist_File_Fold_Auto_Close'*
Tlist_File_Fold_Auto_Close~
By default, the tags tree displayed in the taglist window for all the files is
opened. You can close/fold the tags tree for the files manually. To
automatically close the tags tree for inactive files, you can set the
'Tlist_File_Fold_Auto_Close' variable to 1. When this variable is set to 1,
the tags tree for the current buffer is automatically opened and for all the
other buffers is closed.
>
	let Tlist_File_Fold_Auto_Close = 1
<
					    *'Tlist_GainFocus_On_ToggleOpen'*
Tlist_GainFocus_On_ToggleOpen~
When the taglist window is opened using the ':TlistToggle' command, this
option controls whether the cursor is moved to the taglist window or remains
in the current window. By default, this option is set to 0 and the cursor
remains in the current window. When this variable is set to 1, the cursor
moves to the taglist window after opening the taglist window.
>
	let Tlist_GainFocus_On_ToggleOpen = 1
<
					    *'Tlist_Highlight_Tag_On_BufEnter'*
Tlist_Highlight_Tag_On_BufEnter~
When you enter a Vim buffer/window, the current tag in that buffer/window is
automatically highlighted in the taglist window. If the current tag name is
not visible in the taglist window, then the taglist window contents are
scrolled to make that tag name visible. If you like to disable the automatic
highlighting of the current tag when entering a buffer, you can set the
'Tlist_Highlight_Tag_On_BufEnter' variable to zero. The default setting for
this variable is 1.
>
	let Tlist_Highlight_Tag_On_BufEnter = 0
<
						*'Tlist_Inc_Winwidth'*
Tlist_Inc_Winwidth~
By default, when the width of the window is less than 100 and a new taglist
window is opened vertically, then the window width is increased by the value
set in the 'Tlist_WinWidth' variable to accommodate the new window. The value
of this variable is used only if you are using a vertically split taglist
window.

If your terminal doesn't support changing the window width from Vim (older
version of xterm running in a Unix system) or if you see any weird problems in
the screen due to the change in the window width or if you prefer not to
adjust the window width then set the 'Tlist_Inc_Winwidth' variable to zero.
CAUTION: If you are using the MS-Windows version of Vim in a MS-DOS command
window then you must set this variable to zero, otherwise the system may hang
due to a Vim limitation (explained in :help win32-problems)
>
	let Tlist_Inc_Winwidth = 0
<
						*'Tlist_Max_Submenu_Items'*
Tlist_Max_Submenu_Items~
If a file contains too many tags of a particular type (function, variable,
class, etc.), greater than that specified by the 'Tlist_Max_Submenu_Items'
variable, then the menu for that tag type will be split into multiple
sub-menus. The default setting for the 'Tlist_Max_Submenu_Items' variable is
25.  This can be changed by setting the 'Tlist_Max_Submenu_Items' variable:
>
	let Tlist_Max_Submenu_Items = 20
<
The name of the submenu is formed using the names of the first and the last
tag entries in that submenu.

						*'Tlist_Max_Tag_Length'*
Tlist_Max_Tag_Length~
Only the first 'Tlist_Max_Tag_Length' characters from the tag names will be
used to form the tag type submenu name. The default value for this variable is
10.  Change the 'Tlist_Max_Tag_Length' setting if you want to include more or
less characters:
>
	let Tlist_Max_Tag_Length = 10
<
						*'Tlist_Process_File_Always'*
Tlist_Process_File_Always~
By default, the taglist 插件 will generate and process the tags defined in
the newly opened files only when the taglist window is opened or when the
taglist menu is enabled. When the taglist window is closed, the taglist 插件
will stop processing the tags for newly opened files.

You can set the 'Tlist_Process_File_Always' variable to 1 to generate the list
of tags for new files even when the taglist window is closed and the taglist
menu is disabled.
>
	let Tlist_Process_File_Always = 1
<
To use the ":TlistShowTag" and the ":TlistShowPrototype" commands without the
taglist window and the taglist menu, you should set this variable to 1.

						*'Tlist_Show_Menu'*
Tlist_Show_Menu~
When using GUI Vim, you can display the tags defined in the current file in a
menu named "Tags". By default, this feature is turned off. To turn on this
feature, set the 'Tlist_Show_Menu' variable to 1:
>
	let Tlist_Show_Menu = 1
<
						*'Tlist_Show_One_File'*
Tlist_Show_One_File~
By default, the taglist 插件 will display the tags defined in all the loaded
buffers in the taglist window. If you prefer to display the tags defined only
in the current buffer, then you can set the 'Tlist_Show_One_File' to 1. When
this variable is set to 1, as you switch between buffers, the taglist window
will be refreshed to display the tags for the current buffer and the tags for
the previous buffer will be removed.
>
	let Tlist_Show_One_File = 1
<
						*'Tlist_Sort_Type'*
Tlist_Sort_Type~
The 'Tlist_Sort_Type' variable specifies the sort order for the tags in the
taglist window. The tags can be sorted either alphabetically by their name or
by the order of their appearance in the file (chronological order). By
default, the tag names will be listed by the order in which they are defined
in the file. You can change the sort type (from name to order or from order to
name) by pressing the "s" key in the taglist window. You can also change the
default sort order by setting 'Tlist_Sort_Type' to "name" or "order":
>
	let Tlist_Sort_Type = "name"
<
						*'Tlist_Use_Horiz_Window'*
Tlist_Use_Horiz_Window~
Be default, the tag names are displayed in a vertically split window. If you
prefer a horizontally split window, then set the 'Tlist_Use_Horiz_Window'
variable to 1. If you are running MS-Windows version of Vim in a MS-DOS
command window, then you should use a horizontally split window instead of a
vertically split window. Also, if you are using an older version of xterm in a
Unix system that doesn't support changing the xterm window width, you should
use a horizontally split window.
>
	let Tlist_Use_Horiz_Window = 1
<
						*'Tlist_Use_Right_Window'*
Tlist_Use_Right_Window~
By default, the vertically split taglist window will appear on the left hand
side. If you prefer to open the window on the right hand side, you can set the
'Tlist_Use_Right_Window' variable to 1:
>
	let Tlist_Use_Right_Window = 1
<
						*'Tlist_Use_SingleClick'*
Tlist_Use_SingleClick~
By default, when you double click on the tag name using the left mouse
button, the cursor will be positioned at the definition of the tag. You
can set the 'Tlist_Use_SingleClick' variable to 1 to jump to a tag when
you single click on the tag name using the mouse. By default this variable
is set to zero.
>
	let Tlist_Use_SingleClick = 1
<
Due to a bug in Vim, if you set 'Tlist_Use_SingleClick' to 1 and try to resize
the taglist window using the mouse, then Vim will crash. This problem is fixed
in Vim 6.3 and above. In the meantime, instead of resizing the taglist window
using the mouse, you can use normal Vim window resizing commands to resize the
taglist window.

						*'Tlist_WinHeight'*
Tlist_WinHeight~
The default height of the horizontally split taglist window is 10. This can be
changed by modifying the 'Tlist_WinHeight' variable:
>
	let Tlist_WinHeight = 20
<
The |'winfixheight'| option is set for the taglist window, to maintain the
height of the taglist window, when new Vim windows are opened and existing
windows are closed.

						*'Tlist_WinWidth'*
Tlist_WinWidth~
The default width of the vertically split taglist window is 30. This can be
changed by modifying the 'Tlist_WinWidth' variable:
>
	let Tlist_WinWidth = 20
<
Note that the value of the |'winwidth'| option setting determines the minimum
width of the current window. If you set the 'Tlist_WinWidth' variable to a
value less than that of the |'winwidth'| option setting, then Vim will use the
value of the |'winwidth'| option.

When new Vim windows are opened and existing windows are closed, the taglist
插件 will try to maintain the width of the taglist window to the size
specified by the 'Tlist_WinWidth' variable.

==============================================================================
						*taglist-commands*
7. 命令~

taglist 插件提供了以下命令：

|:TlistAddFiles|	增加多个文件到 taglit
|:TlistAddFilesRecursive|
			递归的将文件加入到 taglist 中。
|:TlistClose|		关闭 taglist 窗口
|:TlistDebug|		开始记录 taglist 的调试信息
|:TlistLock|		停止向 taglist 中增加新文件
|:TlistMessages|	显示已记录的 taglit 插件的调试信息
|:TlistOpen|		打开并跳转到 taglit 窗口
|:TlistSessionSave|	把 taglist 中的文件和 tags 的信息保存到会话文件中
|:TlistSessionLoad|	把存储在会话文件中的文件和 tags 的信息加载到 taglist 中
|:TlistShowPrototype|	Display the prototype of the tag at or before the
		    	specified line number.
|:TlistShowTag|		Display the name of the tag defined at or before the
			specified line number.
|:TlistHighlightTag|	Highlight the current tag in the taglist window.
|:TlistToggle|		Open or close (toggle) the taglist window.
|:TlistUndebug|		Stop logging of taglist debug messages.
|:TlistUnlock|		Start adding new files to the taglist.
|:TlistUpdate|		Update the tags for the current buffer.

						*:TlistAddFiles*
:TlistAddFiles {file(s)} [file(s) ...]
		增加一个或多个文件到 taglist 中。您也可以使用通配符来指定多个
		文件。如果文件名中有空格，要使用反斜线符号转义。
		例子：
>
		    :TlistAddFiles *.c *.cpp
		    :TlistAddFiles file1.html file2.html
<
		如果您指定了大量的文件，taglit 插件将花费大量的时间来处理。指
		的文件不能在 Vim 窗口中编辑，也不会增加到 Vim 的缓冲列表中。

						*:TlistAddFilesRecursive*
:TlistAddFilesRecursive {directory} [ {pattern} ]
		向 taglit 中递归增加指定目录 {directory} 下匹配规则
		{pattern} 的所有文件。如果没有指定 {pattern} ，就会指定为 '*'
		。如果要指定当前目录，就用 "." 代替 {directory}。如果指定目录
		名中有空格，您应该使用反斜线符号进行转义。
		例子:
>
		    :TlistAddFilesRecursive myproject *.java
		    :TlistAddFilesRecursive smallproject
<
		如果指定的目录树中有大量的文件，taglit 插件会花费大量的时间来
		进行处理。

						*:TlistClose*
:TlistClose	关闭 taglist 窗口。在任何 Vim 窗口中，该命令都是可以使用的。

						*:TlistDebug*
:TlistDebug [filename]
		形如记录 taglist 插件中的调试信息。如果指定了 {filename}，调
		试信息会储存到这个文件中。否则，调试信息会存到一个脚本的局部
		变量中。如果文件 {filename} 已经存在了，它会被覆盖掉。

						*:TlistLock*
:TlistLock
		锁定 taglist ,不处理新文件。执行这个命令后，新被编辑的文件不
		会增加到 taglist 中。

						*:TlistMessages*
:TlistMessages
		在一个窗口中显示来自于 taglist 插件的调试信息。仅当调试信息被
		记录到脚本的局部变量时，该命令才有效。

						*:TlistOpen*
:TlistOpen	打开并跳转到 taglist 窗口。如果 taglist 窗口没有打开，则创建
		该窗口。当该命令执行时，光标会移动到 taglist 窗口中。如果是第
		一次打开 taglist 窗口，缓冲列表里所有的文件都会被处理，taglist
		窗口会显示他们定义好的 tags 

						*:TlistSessionSave*
:TlistSessionSave {filename}
		Saves the information about files and tags in the taglist to
		the specified file. This command can be used to save and
		restore the taglist contents across Vim sessions.

						*:TlistSessionLoad*
:TlistSessionLoad {filename}
		Load the information about files and tags stored in the
｀		specified session file to the taglist.

						*:TlistShowPrototype*
:TlistShowPrototype [filename] [linenumber]
		Display the prototype of the tag at or before the specified
		line number. If the file name and the line number are not
		specified, then the current file name and line number are
		used. A tag spans multiple lines starting from the line where
		it is defined to the line before the next tag. This command
		displays the prototype for the tag for any line number in this
		range.

						*:TlistShowTag*
:TlistShowTag [filename] [linenumber]
		Display the name of the tag defined at or before the specified
		line number. If the file name and the line number are not
		specified, then the current file name and line number are
		used. A tag spans multiple lines starting from the line where
		it is defined to the line before the next tag. This command
		displays the tag name for any line number in this range.

						*:TlistHighlightTag*
:TlistHighlightTag
		Highlight the current tag in the taglist window. By default,
		the taglist 插件 periodically updates the taglist window to
		highlight the current tag. This command can be used to force
		the taglist 插件 to highlight the current tag.

						*:TlistToggle*
:TlistToggle	Open or close (toggle) the taglist window. Opens the taglist
		window, if the window is not opened currently. Closes the
		taglist window, if the taglist window is already opened. When
		the taglist window is opened for the first time, all the files
		in the buffer list are processed and the tags are displayed in
		the taglist window. After executing this command, the cursor
		is not moved from the current window to the taglist window.

						*:TlistUndebug*
:TlistUndebug
		停止记录 taglist 插件的调试信息

						*:TlistUnlock*
:TlistUnlock
		解锁taglist，开始处理新的文件。

						*:TlistUpdate*
:TlistUpdate	
		更新当前缓冲区里的标签信息。这个命令可以用来重新处理当前的文件
		或缓冲区来得到标签信息。当 taglist 插件使用硬盘上的文件（而不
		是 Vim 缓冲区里显示的文件），在你保存更新 taglist 前，你应该保
		存已经修改的缓冲区。否则所列出的标签将不包括在缓冲区中新建的那
		些。当 taglist 窗口关闭的时候，你也可以使用这个命令。

==============================================================================
						*taglist-functions*
8. Global functions~

The taglist 插件 provides several global functions that can be used from
other Vim 插件s to interact with the taglist 插件. These functions are
described below.

|Tlist_Update_File_Tags()|		Update the tags for the specified file
|Tlist_Get_Tag_Prototype_By_Line()|	Return the prototype of the tag at or
				    	before the specified line number in the
				    	specified file.
|Tlist_Get_Tagname_By_Line()|		Return the name of the tag at or
					before the specified line number in
					the specified file.
|Tlist_Set_App()|			Set the name of the application
					controlling the taglist window.

					    *Tlist_Update_File_Tags()*
Tlist_Update_File_Tags({filename}, {filetype})
		Update the tags for the file {filename}. The second argument
		specifies the Vim filetype for the file. If the taglist 插件
		has not processed the file previously, then the exuberant
		ctags tool is invoked to generate the tags for the file.

					    *Tlist_Get_Tag_Prototype_By_Line()*
Tlist_Get_Tag_Prototype_By_Line([{filename}, {linenumber}])
		Return the prototype of the tag at or before the specified
		line number in the specified file. If the filename and line
		number are not specified, then the current buffer name and the
		current line number are used.

					    *Tlist_Get_Tagname_By_Line()*
Tlist_Get_Tagname_By_Line([{filename}, {linenumber}])
		Return the name of the tag at or before the specified line
		number in the specified file. If the filename and line number
		are not specified, then the current buffer name and the
		current line number are used.

					    *Tlist_Set_App()*
Tlist_Set_App({appname})
		Set the name of the 插件 that controls the taglist 插件
		window and buffer. This can be used to integrate the taglist
		插件 with other Vim 插件s.

		For example, the winmanager 插件 and the Cream package use
		this function and specify the appname as "winmanager" and
		"cream" respectively.

		By default, the taglist 插件 is a stand-alone 插件 and
		controls the taglist window and buffer. If the taglist window
		is controlled by an external 插件, then the appname should
		be set appropriately.

==============================================================================
						*taglist-extend*
9. Extending~

The taglist 插件 supports all the languages supported by the exuberant ctags
tool, which includes the following languages: Assembly, ASP, Awk, Beta, C,
C++, C#, Cobol, Eiffel, Erlang, Fortran, HTML, Java, Javascript, Lisp, Lua,
Make, Pascal, Perl, PHP, Python, Rexx, Ruby, Scheme, Shell, Slang, SML, Sql,
TCL, Verilog, Vim and Yacc.

You can extend the taglist 插件 to add support for new languages and also
modify the support for the above listed languages.

You should NOT make modifications to the taglist 插件 script file to add
support for new languages. You will lose these changes when you upgrade to the
next version of the taglist 插件. Instead you should follow the below
described instructions to extend the taglist 插件.

You can extend the taglist 插件 by setting variables in the .vimrc or _vimrc
file. The name of these variables depends on the language name and is
described below.

Modifying support for an existing language~
To modify the support for an already supported language, you have to set the
tlist_xxx_settings variable in the ~/.vimrc or $HOME/_vimrc file. Replace xxx
with the Vim filetype name for the language file.  For example, to modify the
support for the perl language files, you have to set the tlist_perl_settings
variable. To modify the support for java files, you have to set the
tlist_java_settings variable.

To determine the filetype name used by Vim for a file, use the following
command in the buffer containing the file:

	:set filetype

The above command will display the Vim filetype for the current buffer.

The format of the value set in the tlist_xxx_settings variable is

    <language_name>;flag1:name1;flag2:name2;flag3:name3

The different fields in the value are separated by the ';' character.

The first field 'language_name' is the name used by exuberant ctags to refer
to this language file. This name can be different from the file type name used
by Vim. For example, for C++, the language name used by ctags is 'c++' but the
filetype name used by Vim is 'cpp'. To get the list of language names
supported by exuberant ctags, use the following command:

	$ ctags --list-maps=all

The remaining fields follow the format "flag:name". The sub-field 'flag' is
the language specific flag used by exuberant ctags to generate the
corresponding tags. For example, for the C language, to list only the
functions, the 'f' flag is used. To get the list of flags supported by
exuberant ctags for the various languages use the following command:

	$ ctags --list-kinds=all

The sub-field 'name' specifies the title text to use for displaying the tags
of a particular type. For example, 'name' can be set to 'functions'. This
field can be set to any text string name.

For example, to list only the classes and functions defined in a C++ language
file, add the following line to your .vimrc file:

	let tlist_cpp_settings = 'c++;c:class;f:function'

In the above setting, 'cpp' is the Vim filetype name and 'c++' is the name
used by the exuberant ctags tool. 'c' and 'f' are the flags passed to
exuberant ctags to list C++ classes and functions and 'class' is the title
used for the class tags and 'function' is the title used for the function tags
in the taglist window.

For example, to display only functions defined in a C file and to use "My
Functions" as the title for the function tags, use

	let tlist_c_settings = 'c;f:My Functions'

When you set the tlist_xxx_settings variable, you will override the default
setting used by the taglist 插件 for the 'xxx' language. You cannot add to
the default options used by the taglist 插件 for a particular file type. To
add to the options used by the taglist 插件 for a language, copy the option
values from the taglist 插件 file to your .vimrc file and modify it.

Adding support for a new language~
If you want to add support for a new language to the taglist 插件, you need
to first extend the exuberant ctags tool. For more information about extending
exuberant ctags, visit the following page:

    http://ctags.sourceforge.net/EXTENDING.html

To add support for a new language, set the tlist_xxx_settings variable in the
~/.vimrc file appropriately as described above. Replace 'xxx' in the variable
name with the Vim filetype name for the new language.

For example, to extend the taglist 插件 to support the latex language, you
can use the following line (assuming, you have already extended exuberant
ctags to support the latex language):

	let tlist_tex_settings='latex;b:bibitem;c:command;l:label'

With the above line, when you edit files of filetype "tex" in Vim, the taglist
插件 will invoke the exuberant ctags tool passing the "latex" filetype and
the flags b, c and l to generate the tags. The text heading 'bibitem',
'command' and 'label' will be used in the taglist window for the tags which
are generated for the flags b, c and l respectively.

==============================================================================
						*taglist-faq*
10. 常见问题~

问：taglist 插件不能用。taglist 窗口是空白的，文件中定义好的 tags 不显示。
答：你是洁使用的是 Vim 6.0 或更高的版本？taglist 插件信赖一些 vim 6.0 或更高的
    版本才支持的特性。您可以使用下面的命令得到 Vim 的版本：
>
	$ vim --version
<
    您正在使用 exuberant ctags 5.0 或更高的版本嘛？ taglist 插件依赖于
    exuberant ctags 支持的特性，而与 GUN ctags 或 Unix ctags utility 是不起作
    用的。您能使用下面的命令来判定您系统里安装的 ctags 是否是 exuberant
    ctags：
>
	$ ctags --version
<
    是否 exuberant ctags 出现在你系统的 PATH 目录中？如果没有，您需要设定
    Tlist_Ctags_Cmd 变量来指向 exuberant ctags 的位置。使用下面的 Vim 命令来验
    正设置是否正确：
>
	:echo system(Tlist_Ctags_Cmd . ' --version')
<
    上面的命令应该显示 exuberant ctags 的版本信息。   

    您是否打开了 Vim 的文件类型侦测？ taglist 插件信赖于由 Vim 侦测的文件类型
    并将之传递给 exuberant ctags 来解析 tags 。检查下面 Vim 命令的输入：
>
	:filetype
<
    上面命令的输出应该包含 "filetype detection:ON" 。如查要打开文件类型侦测功
    能，请把下面一行增加到 .vimrc 或 _vimrc 文件中：
>
	filetype on
<
    您的 Vim 版本中是否编译入了 system() 函数功能支持？下面的 Vim 命令应该会显
    示 1：
>
	:echo exists('*system')
<
    在一些 Linux 发行版中 (尤其是 Suse Linux )，默认的 Vim 安装是没有编译
    system() 函数支持的。taglist 插件使用 system() 函数来调用 exuberant ctags
    程序。你需要启用 system() 函数支持后重新编译 Vim。如果你使用默认的编译选项
    ，system() 函数功能将不会被支持。

    你是否有 |'shellslash'| 选项集？你能试图关闭 |'shellslash'| 选项。当
    taglist 插件使用文件路径调用 exuberant ctags 程序，如果使用不正确的斜线，
    你将看到错误提示。

    使用下面的命令检查与 shell 相关的 Vim 选项值。
>
	:set shell? shellcmdflag? shellpipe?
	:set shellquote? shellredir? shellxquote?
<
    如果你的 .vimrc 或 _vimrc 文件中设置了这些选项，试着移除这些选项。

    你是否在一个 MS-Windows 环境中使用 Unix shell ? 例如，来自于 MKS-toolkit
    的 Unix shell。你是否设定了指向 shell 的 SHELL 环境设置？你可以重新设置
    SHELL 环境变量。

    如果你正在 MS-Windows 中使用 Unix shell ，为了 exuberant ctags 能理解路径
    名中的斜线字符 , 你需要为 Unix 环境编译的exuberant ctags ， 

    exuberant ctags 程序是否支持你的文件类型？ctags 的帮助中列出了 exuberant
    tags 支持的文件类型。如果某文件类型不被支持，你可以扩展 exuberant ctags 来
    支持它。你能使用下面的命令来列出 exuberant ctags 支持的所有文件类型。
>
	ctags --list-languages
<
    在命令提示符下运行下面的命令来检查 exuberant ctags 的输出文件中是否列出了
    你的文件中定义的 tags ：Note
>
	ctags -f - --format=2 --excmd=pattern --fields=nks <filename>
<
    从上面的命令中，如果你能在输出是看到你的 tags , exuberant ctags 程序就能正
    确的解析你的文件。

    在你的主目录中是否存在 .ctags 、 _ctags 或 ctags.cnf 文件为扩展 exuberant
    ctgas 指定默认的选项？如果存在这个文件，请检查文件内的选项以确保这些选项与
    taglist 插件的操作产生冲突。

    如果你正在使用 MS-Windows ，查检 TEMP 和 TMP 的环境变量值。如果这些变量值
    设定路径中存在空格，就用 DOS 8.3 格式的短路径名，或者把他设置指向没有空格
    字符的路径。例如，如果临时目录名是 "C:\Documents and Settings\xyz\Local 
    Settings\Temp"，那么设置 TEMP 变量如下：
>
	set TEMP=C:\DOCUMEN~1\xyz\LOCALS~1\Temp
<
    如果 exuberant ctags 安装到了含有空格字符的目录中，那么把这个目录加入 PATH
    的环境变量，或都设置 'Tlist_Ctags_Cmd' 变量为指向 ctags 的短路径名，或者把
    exuberant ctags 拷贝到名字中没有空格的路径。例如，如果 exuberant ctags 安
    装到目录"C:\Program Files\Ctags"中，那么设置 'Tlist_Ctags_Cmd' 变量如下：
>
	let Tlist_Ctags_Cmd='C:\Progra~1\Ctags\ctags.exe'
<
    如果你在 MS-Windows 上使用 cygwin 编译的 exuberant ctags 版本，确保你已经
    安装了 cygwin 编译的排序程序，而且在你的变量路径里。或者编译的 exuberant
    ctags 支持排序。否则，当 exuberant ctags 使用调用排序程序处理标签输出时，
    他可能会调用MS-windows版本的sort.exe，从而导致错误。

问：当我试图打开taglist窗口的时候，我看到了如下这个错误信息。我怎样才能修复这
    个问题？

    Taglist:无法在/my/path/to/file产生标签
    ctags:无效选项 -- -^@使用：ctags [-BFadtuwvx] [-f tagsfile] file ...

答：taglist 插件只能和 exuberant ctags 在一起工作。你不能使用 GUN ctags 或者
    Unix ctags 程序。如果你用一个非 exuberant ctags 程序，你就会得到与上面类似
    的错误信息。为了修复这个问题，可以把 exuberant ctags 工具的路径加到系统的
    环境变量中或者设置 'Tlist_Ctags_Cmd' 这个变量。

Q. A file has more than one tag with the same name. When I select a tag name
   from the taglist window, the cursor is positioned at the incorrect tag
   location.
A. The taglist 插件 uses the search pattern generated by the exuberant ctags
   utility to position the cursor at the location of a tag definition. If a
   file has more than one tag with the same name and same prototype, then the
   search pattern will be the same. In this case, when searching for the tag
   pattern, the cursor may be positioned at the incorrect location.

Q. I have made some modifications to my file and introduced new
   functions/classes/variables. I have not yet saved my file. The taglist
   插件 is not displaying the new tags when I update the taglist window.
A. The exuberant ctags utility will process only files that are present in the
   disk. To list the tags defined in a file, you have to save the file and
   then update the taglist window.

问：我已经使用 exuberant ctags 工具为我的源代码树产生了 ctags 文件。我如何设置
    taglist 插件来使用这个 tags 文件。
答：taglist 插件不使用存储在硬盘里的 tags 文件。对于打开的文件，tagslist 插件
    会自动调用 exuberant ctags 程序来产生列表。vim 的 system() 函数用来调用
    exuberant ctags 来产生 ctags 的输出。这个函数内部使用了一个临时文件来存储
    输出。当读取完输出的内容后，这个文件就会被删除。所以你永远不会看到包函
    exuberant ctags 输出内容的文件。

问：当我设置 |'updatetime'| 选项一个较小的值（小于1000），而且如果我打开了
    taglist 的窗口中按键，当前缓冲的内容会发生改变。这是为什么？
答：taglist 插件使用 |CursorHold| 自动命令来高亮当前的标签。CursorHold 自动 命
    令每 |'updatetime'| 毫秒时间内就会被触发。如果 |'updatetime'| 选项设定一个
    小值时，CursorHold 自动命令会频繁的被触发。由于 taglist 插件为了高亮当前的
    标签而改变焦点，可能与键的移动产生冲突，从而导致当前缓冲区内的内容发生改变
    。对于这个问题，工作区内不把 |'updatetime'| 选项设定为一个小值。

==============================================================================
						*taglist-license*
11. 许可证~
Permission is hereby granted to use and distribute the taglist 插件, with or
without modifications, provided that this copyright notice is copied with it.
Like anything else that's free, taglist.vim is provided *as is* and comes with
no warranty of any kind, either expressed or implied. In no event will the
copyright holder be liable for any damamges resulting from the use of this
software.

==============================================================================
						*taglist-todo*
12. 待办事项~

1. Group tags according to the scope and display them. For example,
   group all the tags belonging to a C++/Java class
2. Support for displaying tags in a modified (not-yet-saved) file.
3. Automatically open the taglist window only for selected filetypes.
   For other filetypes, close the taglist window.
4. When using the shell from the MKS toolkit, the taglist 插件
   doesn't work.
5. The taglist 插件 doesn't work with files edited remotely using the
   netrw 插件. The exuberant ctags utility cannot process files over
   scp/rcp/ftp, etc.

==============================================================================

vim:tw=78:ts=8:noet:ft=help:
